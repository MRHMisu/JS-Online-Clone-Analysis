<?xml version="1.0"?>
<code_snippets language="c#">
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<?xml version="1.0"?>
<code_snippets language="c#">
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="1528"AnswerId="1556"LOC="5">[Obsolete("These are not supported in this class.", true)]
public override  void dontcallmeanymore()
{
}
</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="1528"AnswerId="1556"LOC="5">[Obsolete("These are not supported in this class.", true)]
public override  void dontcallmeanymore()
{
}
</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="1528"AnswerId="1556"LOC="5">[Obsolete("These are not supported in this class.", true)]
public override  void dontcallmeanymore()
{
}
</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="1836"AnswerId="1843"LOC="17">using System;
using System.Drawing;
using System.Windows.Forms;

static class Program
{
    static void Main()
    {
        Timer timer = new Timer();
        // timer.Interval = 4 minutes
        timer.Interval = (int)(TimeSpan.TicksPerMinute * 4 / TimeSpan.TicksPerMillisecond);
        timer.Tick += (sender, args) => { Cursor.Position = new Point(Cursor.Position.X + 1, Cursor.Position.Y + 1); };
        timer.Start();
        Application.Run();
    }
}
</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="1528"AnswerId="1556"LOC="5">[Obsolete("These are not supported in this class.", true)]
public override  void dontcallmeanymore()
{
}
</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="1836"AnswerId="1843"LOC="17">using System;
using System.Drawing;
using System.Windows.Forms;

static class Program
{
    static void Main()
    {
        Timer timer = new Timer();
        // timer.Interval = 4 minutes
        timer.Interval = (int)(TimeSpan.TicksPerMinute * 4 / TimeSpan.TicksPerMillisecond);
        timer.Tick += (sender, args) => { Cursor.Position = new Point(Cursor.Position.X + 1, Cursor.Position.Y + 1); };
        timer.Start();
        Application.Run();
    }
}
</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="1528"AnswerId="1556"LOC="5">[Obsolete("These are not supported in this class.", true)]
public override  void dontcallmeanymore()
{
}
</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="1836"AnswerId="1843"LOC="17">using System;
using System.Drawing;
using System.Windows.Forms;

static class Program
{
    static void Main()
    {
        Timer timer = new Timer();
        // timer.Interval = 4 minutes
        timer.Interval = (int)(TimeSpan.TicksPerMinute * 4 / TimeSpan.TicksPerMillisecond);
        timer.Tick += (sender, args) => { Cursor.Position = new Point(Cursor.Position.X + 1, Cursor.Position.Y + 1); };
        timer.Start();
        Application.Run();
    }
}
</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="1936"AnswerId="1940"LOC="14">public ActionResult Form()
{
    /* Declare viewData etc. */

    if (TempData["form"] != null)
    {
        /* Cast TempData["form"] to 
        System.Collections.Specialized.NameValueCollection 
        and use it */
    }

    return View("Form", viewData);
}
</code>
<code QuestionId="1936"AnswerId="1940"LOC="6">public ActionResult Send()
{
    TempData["form"] = Request.Form;
    return this.RedirectToAction(a => a.Form());
}
</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="1528"AnswerId="1556"LOC="5">[Obsolete("These are not supported in this class.", true)]
public override  void dontcallmeanymore()
{
}
</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="1836"AnswerId="1843"LOC="17">using System;
using System.Drawing;
using System.Windows.Forms;

static class Program
{
    static void Main()
    {
        Timer timer = new Timer();
        // timer.Interval = 4 minutes
        timer.Interval = (int)(TimeSpan.TicksPerMinute * 4 / TimeSpan.TicksPerMillisecond);
        timer.Tick += (sender, args) => { Cursor.Position = new Point(Cursor.Position.X + 1, Cursor.Position.Y + 1); };
        timer.Start();
        Application.Run();
    }
}
</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="1936"AnswerId="1940"LOC="14">public ActionResult Form()
{
    /* Declare viewData etc. */

    if (TempData["form"] != null)
    {
        /* Cast TempData["form"] to 
        System.Collections.Specialized.NameValueCollection 
        and use it */
    }

    return View("Form", viewData);
}
</code>
<code QuestionId="1936"AnswerId="1940"LOC="6">public ActionResult Send()
{
    TempData["form"] = Request.Form;
    return this.RedirectToAction(a => a.Form());
}
</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="1528"AnswerId="1556"LOC="5">[Obsolete("These are not supported in this class.", true)]
public override  void dontcallmeanymore()
{
}
</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="1836"AnswerId="1843"LOC="17">using System;
using System.Drawing;
using System.Windows.Forms;

static class Program
{
    static void Main()
    {
        Timer timer = new Timer();
        // timer.Interval = 4 minutes
        timer.Interval = (int)(TimeSpan.TicksPerMinute * 4 / TimeSpan.TicksPerMillisecond);
        timer.Tick += (sender, args) => { Cursor.Position = new Point(Cursor.Position.X + 1, Cursor.Position.Y + 1); };
        timer.Start();
        Application.Run();
    }
}
</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="1535"AnswerId="2047"LOC="6">[RetryFor( 10.Hours() )]
public void DeleteArchive()
{
  //.. code to just delete the archive
}
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="1936"AnswerId="1940"LOC="14">public ActionResult Form()
{
    /* Declare viewData etc. */

    if (TempData["form"] != null)
    {
        /* Cast TempData["form"] to 
        System.Collections.Specialized.NameValueCollection 
        and use it */
    }

    return View("Form", viewData);
}
</code>
<code QuestionId="1936"AnswerId="1940"LOC="6">public ActionResult Send()
{
    TempData["form"] = Request.Form;
    return this.RedirectToAction(a => a.Form());
}
</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="1528"AnswerId="1556"LOC="5">[Obsolete("These are not supported in this class.", true)]
public override  void dontcallmeanymore()
{
}
</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2">Master.FindControl("masterpageBody")
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="1836"AnswerId="1843"LOC="17">using System;
using System.Drawing;
using System.Windows.Forms;

static class Program
{
    static void Main()
    {
        Timer timer = new Timer();
        // timer.Interval = 4 minutes
        timer.Interval = (int)(TimeSpan.TicksPerMinute * 4 / TimeSpan.TicksPerMillisecond);
        timer.Tick += (sender, args) => { Cursor.Position = new Point(Cursor.Position.X + 1, Cursor.Position.Y + 1); };
        timer.Start();
        Application.Run();
    }
}
</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="1535"AnswerId="2047"LOC="6">[RetryFor( 10.Hours() )]
public void DeleteArchive()
{
  //.. code to just delete the archive
}
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="1936"AnswerId="1940"LOC="14">public ActionResult Form()
{
    /* Declare viewData etc. */

    if (TempData["form"] != null)
    {
        /* Cast TempData["form"] to 
        System.Collections.Specialized.NameValueCollection 
        and use it */
    }

    return View("Form", viewData);
}
</code>
<code QuestionId="1936"AnswerId="1940"LOC="6">public ActionResult Send()
{
    TempData["form"] = Request.Form;
    return this.RedirectToAction(a => a.Form());
}
</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><% MasterPageFile="..." %>
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><body runat="server" id="masterpageBody">
</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="1528"AnswerId="1556"LOC="5">[Obsolete("These are not supported in this class.", true)]
public override  void dontcallmeanymore()
{
}
</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2">Master.FindControl("masterpageBody")
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="1836"AnswerId="1843"LOC="17">using System;
using System.Drawing;
using System.Windows.Forms;

static class Program
{
    static void Main()
    {
        Timer timer = new Timer();
        // timer.Interval = 4 minutes
        timer.Interval = (int)(TimeSpan.TicksPerMinute * 4 / TimeSpan.TicksPerMillisecond);
        timer.Tick += (sender, args) => { Cursor.Position = new Point(Cursor.Position.X + 1, Cursor.Position.Y + 1); };
        timer.Start();
        Application.Run();
    }
}
</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="1535"AnswerId="2047"LOC="6">[RetryFor( 10.Hours() )]
public void DeleteArchive()
{
  //.. code to just delete the archive
}
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="1936"AnswerId="1940"LOC="14">public ActionResult Form()
{
    /* Declare viewData etc. */

    if (TempData["form"] != null)
    {
        /* Cast TempData["form"] to 
        System.Collections.Specialized.NameValueCollection 
        and use it */
    }

    return View("Form", viewData);
}
</code>
<code QuestionId="1936"AnswerId="1940"LOC="6">public ActionResult Send()
{
    TempData["form"] = Request.Form;
    return this.RedirectToAction(a => a.Form());
}
</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><% MasterPageFile="..." %>
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><body runat="server" id="masterpageBody">
</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="1528"AnswerId="1556"LOC="5">[Obsolete("These are not supported in this class.", true)]
public override  void dontcallmeanymore()
{
}
</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2">Master.FindControl("masterpageBody")
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="1836"AnswerId="1843"LOC="17">using System;
using System.Drawing;
using System.Windows.Forms;

static class Program
{
    static void Main()
    {
        Timer timer = new Timer();
        // timer.Interval = 4 minutes
        timer.Interval = (int)(TimeSpan.TicksPerMinute * 4 / TimeSpan.TicksPerMillisecond);
        timer.Tick += (sender, args) => { Cursor.Position = new Point(Cursor.Position.X + 1, Cursor.Position.Y + 1); };
        timer.Start();
        Application.Run();
    }
}
</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="1535"AnswerId="2047"LOC="6">[RetryFor( 10.Hours() )]
public void DeleteArchive()
{
  //.. code to just delete the archive
}
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="1936"AnswerId="1940"LOC="14">public ActionResult Form()
{
    /* Declare viewData etc. */

    if (TempData["form"] != null)
    {
        /* Cast TempData["form"] to 
        System.Collections.Specialized.NameValueCollection 
        and use it */
    }

    return View("Form", viewData);
}
</code>
<code QuestionId="1936"AnswerId="1940"LOC="6">public ActionResult Send()
{
    TempData["form"] = Request.Form;
    return this.RedirectToAction(a => a.Form());
}
</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><% MasterPageFile="..." %>
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><body runat="server" id="masterpageBody">
</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="1528"AnswerId="1556"LOC="5">[Obsolete("These are not supported in this class.", true)]
public override  void dontcallmeanymore()
{
}
</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2">Master.FindControl("masterpageBody")
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="1836"AnswerId="1843"LOC="17">using System;
using System.Drawing;
using System.Windows.Forms;

static class Program
{
    static void Main()
    {
        Timer timer = new Timer();
        // timer.Interval = 4 minutes
        timer.Interval = (int)(TimeSpan.TicksPerMinute * 4 / TimeSpan.TicksPerMillisecond);
        timer.Tick += (sender, args) => { Cursor.Position = new Point(Cursor.Position.X + 1, Cursor.Position.Y + 1); };
        timer.Start();
        Application.Run();
    }
}
</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="1535"AnswerId="2047"LOC="6">[RetryFor( 10.Hours() )]
public void DeleteArchive()
{
  //.. code to just delete the archive
}
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="1936"AnswerId="1940"LOC="14">public ActionResult Form()
{
    /* Declare viewData etc. */

    if (TempData["form"] != null)
    {
        /* Cast TempData["form"] to 
        System.Collections.Specialized.NameValueCollection 
        and use it */
    }

    return View("Form", viewData);
}
</code>
<code QuestionId="1936"AnswerId="1940"LOC="6">public ActionResult Send()
{
    TempData["form"] = Request.Form;
    return this.RedirectToAction(a => a.Form());
}
</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><% MasterPageFile="..." %>
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><body runat="server" id="masterpageBody">
</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="2256"AnswerId="2490"LOC="4">handle = GCHandle.Alloc(buffer, GCHandleType.Pinned);
o = (YourStruct)Marshal.PtrToStructure(handle.AddrOfPinnedObject(), typeof(YourStruct));
handle.Free();
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="1528"AnswerId="1556"LOC="5">[Obsolete("These are not supported in this class.", true)]
public override  void dontcallmeanymore()
{
}
</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2">Master.FindControl("masterpageBody")
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="1836"AnswerId="1843"LOC="17">using System;
using System.Drawing;
using System.Windows.Forms;

static class Program
{
    static void Main()
    {
        Timer timer = new Timer();
        // timer.Interval = 4 minutes
        timer.Interval = (int)(TimeSpan.TicksPerMinute * 4 / TimeSpan.TicksPerMillisecond);
        timer.Tick += (sender, args) => { Cursor.Position = new Point(Cursor.Position.X + 1, Cursor.Position.Y + 1); };
        timer.Start();
        Application.Run();
    }
}
</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="1535"AnswerId="2047"LOC="6">[RetryFor( 10.Hours() )]
public void DeleteArchive()
{
  //.. code to just delete the archive
}
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="1936"AnswerId="1940"LOC="14">public ActionResult Form()
{
    /* Declare viewData etc. */

    if (TempData["form"] != null)
    {
        /* Cast TempData["form"] to 
        System.Collections.Specialized.NameValueCollection 
        and use it */
    }

    return View("Form", viewData);
}
</code>
<code QuestionId="1936"AnswerId="1940"LOC="6">public ActionResult Send()
{
    TempData["form"] = Request.Form;
    return this.RedirectToAction(a => a.Form());
}
</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="2256"AnswerId="2490"LOC="6">YourStruct o = new YourStruct();
byte[] buffer = new byte[Marshal.SizeOf(typeof(YourStruct))];
GCHandle handle = GCHandle.Alloc(buffer, GCHandleType.Pinned);
Marshal.StructureToPtr(o, handle.AddrOfPinnedObject(), false);
handle.Free();
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><% MasterPageFile="..." %>
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><body runat="server" id="masterpageBody">
</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="2256"AnswerId="2490"LOC="4">handle = GCHandle.Alloc(buffer, GCHandleType.Pinned);
o = (YourStruct)Marshal.PtrToStructure(handle.AddrOfPinnedObject(), typeof(YourStruct));
handle.Free();
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="1528"AnswerId="1556"LOC="5">[Obsolete("These are not supported in this class.", true)]
public override  void dontcallmeanymore()
{
}
</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2">Master.FindControl("masterpageBody")
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="1836"AnswerId="1843"LOC="17">using System;
using System.Drawing;
using System.Windows.Forms;

static class Program
{
    static void Main()
    {
        Timer timer = new Timer();
        // timer.Interval = 4 minutes
        timer.Interval = (int)(TimeSpan.TicksPerMinute * 4 / TimeSpan.TicksPerMillisecond);
        timer.Tick += (sender, args) => { Cursor.Position = new Point(Cursor.Position.X + 1, Cursor.Position.Y + 1); };
        timer.Start();
        Application.Run();
    }
}
</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="1535"AnswerId="2047"LOC="6">[RetryFor( 10.Hours() )]
public void DeleteArchive()
{
  //.. code to just delete the archive
}
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="2527"AnswerId="2546"LOC="14">void treeView1MouseUp(object sender, MouseEventArgs e)
{
    if(e.Button == MouseButtons.Right)
    {
        // Select the clicked node
        treeView1.SelectedNode = treeView1.GetNodeAt(e.X, e.Y);

        if(treeView1.SelectedNode != null)
        {
            myContextMenuStrip.Show(treeView1, e.Location);
        }
    }
}
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="1936"AnswerId="1940"LOC="14">public ActionResult Form()
{
    /* Declare viewData etc. */

    if (TempData["form"] != null)
    {
        /* Cast TempData["form"] to 
        System.Collections.Specialized.NameValueCollection 
        and use it */
    }

    return View("Form", viewData);
}
</code>
<code QuestionId="1936"AnswerId="1940"LOC="6">public ActionResult Send()
{
    TempData["form"] = Request.Form;
    return this.RedirectToAction(a => a.Form());
}
</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="2256"AnswerId="2490"LOC="6">YourStruct o = new YourStruct();
byte[] buffer = new byte[Marshal.SizeOf(typeof(YourStruct))];
GCHandle handle = GCHandle.Alloc(buffer, GCHandleType.Pinned);
Marshal.StructureToPtr(o, handle.AddrOfPinnedObject(), false);
handle.Free();
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><% MasterPageFile="..." %>
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><body runat="server" id="masterpageBody">
</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="2256"AnswerId="2490"LOC="4">handle = GCHandle.Alloc(buffer, GCHandleType.Pinned);
o = (YourStruct)Marshal.PtrToStructure(handle.AddrOfPinnedObject(), typeof(YourStruct));
handle.Free();
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="1528"AnswerId="1556"LOC="5">[Obsolete("These are not supported in this class.", true)]
public override  void dontcallmeanymore()
{
}
</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2">Master.FindControl("masterpageBody")
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="1836"AnswerId="1843"LOC="17">using System;
using System.Drawing;
using System.Windows.Forms;

static class Program
{
    static void Main()
    {
        Timer timer = new Timer();
        // timer.Interval = 4 minutes
        timer.Interval = (int)(TimeSpan.TicksPerMinute * 4 / TimeSpan.TicksPerMillisecond);
        timer.Tick += (sender, args) => { Cursor.Position = new Point(Cursor.Position.X + 1, Cursor.Position.Y + 1); };
        timer.Start();
        Application.Run();
    }
}
</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="1535"AnswerId="2047"LOC="6">[RetryFor( 10.Hours() )]
public void DeleteArchive()
{
  //.. code to just delete the archive
}
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="109"AnswerId="2585"LOC="2">Convert.ToString(Convert.ToChar(Int32.Parse(EncodedString.Substring(intParseIndex, 2), System.Globalization.NumberStyles.HexNumber)));
</code>
<code QuestionId="2527"AnswerId="2546"LOC="14">void treeView1MouseUp(object sender, MouseEventArgs e)
{
    if(e.Button == MouseButtons.Right)
    {
        // Select the clicked node
        treeView1.SelectedNode = treeView1.GetNodeAt(e.X, e.Y);

        if(treeView1.SelectedNode != null)
        {
            myContextMenuStrip.Show(treeView1, e.Location);
        }
    }
}
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="1936"AnswerId="1940"LOC="14">public ActionResult Form()
{
    /* Declare viewData etc. */

    if (TempData["form"] != null)
    {
        /* Cast TempData["form"] to 
        System.Collections.Specialized.NameValueCollection 
        and use it */
    }

    return View("Form", viewData);
}
</code>
<code QuestionId="1936"AnswerId="1940"LOC="6">public ActionResult Send()
{
    TempData["form"] = Request.Form;
    return this.RedirectToAction(a => a.Form());
}
</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="2256"AnswerId="2490"LOC="6">YourStruct o = new YourStruct();
byte[] buffer = new byte[Marshal.SizeOf(typeof(YourStruct))];
GCHandle handle = GCHandle.Alloc(buffer, GCHandleType.Pinned);
Marshal.StructureToPtr(o, handle.AddrOfPinnedObject(), false);
handle.Free();
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><% MasterPageFile="..." %>
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><body runat="server" id="masterpageBody">
</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
<code QuestionId="752"AnswerId="755"LOC="1">Activator</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyMangager</code>
<code QuestionId="601"AnswerId="602"LOC="1">nondet_random</code>
<code QuestionId="4"AnswerId="7"LOC="2">double trans = (double) trackBar1.Value / 5000.0;
</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000d</code>
<code QuestionId="2256"AnswerId="2490"LOC="4">handle = GCHandle.Alloc(buffer, GCHandleType.Pinned);
o = (YourStruct)Marshal.PtrToStructure(handle.AddrOfPinnedObject(), typeof(YourStruct));
handle.Free();
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ComboBox</code>
<code QuestionId="709"AnswerId="713"LOC="1">TestDriven.NET</code>
<code QuestionId="39"AnswerId="45"LOC="1">Console.ReadLine()</code>
<code QuestionId="752"AnswerId="755"LOC="1">System</code>
<code QuestionId="1528"AnswerId="1556"LOC="5">[Obsolete("These are not supported in this class.", true)]
public override  void dontcallmeanymore()
{
}
</code>
<code QuestionId="752"AnswerId="755"LOC="4">ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);

ObjectType instance = (ObjectType)Activator.CreateInstance("MyAssembly","MyNamespace.ObjectType");
</code>
<code QuestionId="1304"AnswerId="1309"LOC="3">if not locked then
    open and update file
</code>
<code QuestionId="11"AnswerId="1248"LOC="41">const int SECOND = 1;
const int MINUTE = 60 * SECOND;
const int HOUR = 60 * MINUTE;
const int DAY = 24 * HOUR;
const int MONTH = 30 * DAY;

var ts = new TimeSpan(DateTime.UtcNow.Ticks - yourDate.Ticks);
double delta = Math.Abs(ts.TotalSeconds);

if (delta < 1 * MINUTE)
  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

if (delta < 2 * MINUTE)
  return "a minute ago";

if (delta < 45 * MINUTE)
  return ts.Minutes + " minutes ago";

if (delta < 90 * MINUTE)
  return "an hour ago";

if (delta < 24 * HOUR)
  return ts.Hours + " hours ago";

if (delta < 48 * HOUR)
  return "yesterday";

if (delta < 30 * DAY)
  return ts.Days + " days ago";

if (delta < 12 * MONTH)
{
  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
  return months <= 1 ? "one month ago" : months + " months ago";
}
else
{
  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
  return years <= 1 ? "one year ago" : years + " years ago";
}
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2">Master.FindControl("masterpageBody")
</code>
<code QuestionId="832"AnswerId="837"LOC="15">var collection=
    from u in db.Universe
    select new
    {
        u.id,
        u.name,
        MaxDate =(DateTime?)
       (
           from h in db.History
           where u.Id == h.Id
           && h.dateCol < yesterday
           select h.dateCol 
       ).Max()
    };
</code>
<code QuestionId="930"AnswerId="951"LOC="23">using System.Data.OleDb;
...

using (OleDbConnection conn = new OleDbConnection())
{
    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";

    using (OleDbCommand cmd = new OleDbCommand())
    {
        conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = "Select * from yourTable";

        using (OleDbDataReader dr = cmd.ExecuteReader())
        {
            while (dr.Read())
            {
                Console.WriteLine(dr["columnName"]);
            }
        }
    }
}
</code>
<code QuestionId="482"AnswerId="509"LOC="1">BindingContext</code>
<code QuestionId="1836"AnswerId="1843"LOC="17">using System;
using System.Drawing;
using System.Windows.Forms;

static class Program
{
    static void Main()
    {
        Timer timer = new Timer();
        // timer.Interval = 4 minutes
        timer.Interval = (int)(TimeSpan.TicksPerMinute * 4 / TimeSpan.TicksPerMillisecond);
        timer.Tick += (sender, args) => { Cursor.Position = new Point(Cursor.Position.X + 1, Cursor.Position.Y + 1); };
        timer.Start();
        Application.Run();
    }
}
</code>
<code QuestionId="9"AnswerId="1404"LOC="7">// Save today's date.
var today = DateTime.Today;
// Calculate the age.
var age = today.Year - birthdate.Year;
// Go back to the year the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;
</code>
<code QuestionId="1535"AnswerId="2047"LOC="6">[RetryFor( 10.Hours() )]
public void DeleteArchive()
{
  //.. code to just delete the archive
}
</code>
<code QuestionId="4"AnswerId="7"LOC="3">double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;
</code>
<code QuestionId="109"AnswerId="2585"LOC="2">Convert.ToString(Convert.ToChar(Int32.Parse(EncodedString.Substring(intParseIndex, 2), System.Globalization.NumberStyles.HexNumber)));
</code>
<code QuestionId="2527"AnswerId="2546"LOC="14">void treeView1MouseUp(object sender, MouseEventArgs e)
{
    if(e.Button == MouseButtons.Right)
    {
        // Select the clicked node
        treeView1.SelectedNode = treeView1.GetNodeAt(e.X, e.Y);

        if(treeView1.SelectedNode != null)
        {
            myContextMenuStrip.Show(treeView1, e.Location);
        }
    }
}
</code>
<code QuestionId="709"AnswerId="713"LOC="1">NUnit</code>
<code QuestionId="4"AnswerId="7"LOC="1">double</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrencyManager</code>
<code QuestionId="1936"AnswerId="1940"LOC="14">public ActionResult Form()
{
    /* Declare viewData etc. */

    if (TempData["form"] != null)
    {
        /* Cast TempData["form"] to 
        System.Collections.Specialized.NameValueCollection 
        and use it */
    }

    return View("Form", viewData);
}
</code>
<code QuestionId="1936"AnswerId="1940"LOC="6">public ActionResult Send()
{
    TempData["form"] = Request.Form;
    return this.RedirectToAction(a => a.Form());
}
</code>
<code QuestionId="709"AnswerId="713"LOC="1">VS.NET</code>
<code QuestionId="4"AnswerId="7"LOC="1">5000.0</code>
<code QuestionId="1040"AnswerId="1044"LOC="1">MoveFileEx</code>
<code QuestionId="709"AnswerId="713"LOC="1">BDD</code>
<code QuestionId="2256"AnswerId="2490"LOC="6">YourStruct o = new YourStruct();
byte[] buffer = new byte[Marshal.SizeOf(typeof(YourStruct))];
GCHandle handle = GCHandle.Alloc(buffer, GCHandleType.Pinned);
Marshal.StructureToPtr(o, handle.AddrOfPinnedObject(), false);
handle.Free();
</code>
<code QuestionId="482"AnswerId="509"LOC="1">ConcurrenyManager</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><% MasterPageFile="..." %>
</code>
<code QuestionId="2209"AnswerId="2233"LOC="2"><body runat="server" id="masterpageBody">
</code>
<code QuestionId="482"AnswerId="509"LOC="1">DataSource</code>
</code_snippets>